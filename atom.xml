<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT 日志</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-05T04:11:25.018Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++流之读写文本文件</title>
    <link href="http://example.com/2021/06/05/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/06/05/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</id>
    <published>2021-06-05T01:45:54.000Z</published>
    <updated>2021-06-05T04:11:25.018Z</updated>
    
    <content type="html"><![CDATA[<p>​    C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。</p><span id="more"></span><h3 id="文件流的类型和头文件"><a href="#文件流的类型和头文件" class="headerlink" title="文件流的类型和头文件"></a>文件流的类型和头文件</h3><ul><li>文件流有三种类型：<ol><li>用于输入：ifstream</li><li>用于输出：ofstream</li><li>即可用于输入也可用于输出：fstream</li></ol></li><li>当使用三种文件流的任何一个时，头文件均为 &lt;fstream&gt;</li></ul><h3 id="打开和关闭文件流，并判断是否打开成功"><a href="#打开和关闭文件流，并判断是否打开成功" class="headerlink" title="打开和关闭文件流，并判断是否打开成功"></a>打开和关闭文件流，并判断是否打开成功</h3><ul><li><h4 id="打开文件流"><a href="#打开文件流" class="headerlink" title="打开文件流"></a>打开文件流</h4><ul><li><p>打开输入文件流：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>这里的 in_file 是文件输入流的一个对象，对于标准输入流 cin 的用法在其上完全适用。</p></li><li><p>其中open是其一个成员函数，使用点记号来进行调用。</p></li><li><p>input.txt 是储存在源文件下名为”input“的一个文本文档，里面的内容用于以后的输入。</p></li></ol></li><li><p>打开输出文件流：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream out_file;</span><br><span class="line">out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>这里的 out_file 是文件输出流的一个对象，对于标准输出流 cout 的用法在其上完全适用。</li><li>其中open是其一个成员函数，使用点记号来进行调用。</li><li>output.txt 是一个输出文件，使用上述语句时会在源文件中生成一个名为”output“的文本文档，输出的内容皆在这里显示。</li></ol></li></ul></li><li><h4 id="判断是否成功打开输入文件流"><a href="#判断是否成功打开输入文件流" class="headerlink" title="判断是否成功打开输入文件流"></a>判断是否成功打开输入文件流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">​cout&lt;&lt; <span class="string">&quot;Can&#x27;t  open  input.txt&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">​读取输入</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：这里的in_file.fail() 中的fail 是一个成员函数，如果打开文件失败，会返回一个true值。</p></li><li><h4 id="关闭文件流"><a href="#关闭文件流" class="headerlink" title="关闭文件流"></a>关闭文件流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">in_file.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>注: 这里的in_file.close() 中的close是一个成员函数，一般在程序结束是所有之前打开的流都会自动关闭，只有在流变量(这里是in_file)处理另一个文件是，才需要手动关闭。</p></li></ul><h3 id="文件流读入和读出，并判断是否成功读入"><a href="#文件流读入和读出，并判断是否成功读入" class="headerlink" title="文件流读入和读出，并判断是否成功读入"></a>文件流读入和读出，并判断是否成功读入</h3><ul><li><h4 id="文件流读入"><a href="#文件流读入" class="headerlink" title="文件流读入"></a>文件流读入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">string letter;</span><br><span class="line">in_file &gt;&gt; letter;</span><br></pre></td></tr></table></figure><p>注：可以看到文件流的读入  in_file &gt;&gt; letter; 于标准读入cin&gt;&gt; letter; 用法相同；不同的是in_file &gt;&gt;letter;是从文本文档 input 中读入，而cin&gt;&gt;letter,是从键盘键入。</p></li><li><h4 id="文件流读出"><a href="#文件流读出" class="headerlink" title="文件流读出"></a>文件流读出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream out_file;</span><br><span class="line">out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">string letter2=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">out_file &lt;&lt; letter2;</span><br></pre></td></tr></table></figure><p>注：可以看到文件流的读出 out_file &lt;&lt; letter2; 于标准读出cout &lt;&lt; letter2; 用法相同；不同的是out_file &lt;&lt; letter2;是将“hello world” 写入文本文档output中，而cout &lt;&lt; letter2,是将“hello world”写入显示屏。</p></li><li><h4 id="判断是否读入成功"><a href="#判断是否读入成功" class="headerlink" title="判断是否读入成功"></a>判断是否读入成功</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">string letter;</span><br><span class="line">in_file &gt;&gt; letter;</span><br><span class="line"><span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">​cout &lt;&lt; <span class="string">&quot;输入错误&quot;</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">​处理输入；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：可以看到其用法于cin.fail()用法相同，当输入错误(当试图从文本中读取数字例如：55，但读入的数据项并不是标准的格式化数字例如：55a，则读取失败，in_file.fail()会返回一个true值。</p><p>值得说明的是，当从文件读取输入时，数字格式错误并不是失败的唯一原因，假设已经使用了文件中包含的所有数据，并试图读取更多的数据项时，文件流就会进入失败状态，而对于格式输入流cin就会一直等待用户输入。因此当一个输入流文件中的数据类型均为数值，我们想要计算其均值，即可直接使用如下语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file；</span><br><span class="line">in_file.<span class="built_in">open</span>(input.txt);</span><br><span class="line"><span class="keyword">double</span> tatol=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"><span class="keyword">while</span>(in_file&gt;&gt;num)</span><br><span class="line">&#123;</span><br><span class="line">    tatol+=num;</span><br><span class="line">    num1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> average = tatol/num1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>读取文本文档input.txt中的所有行，并将其按行逆序输出到文本文档output.txt中。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream in_file;</span><br><span class="line">    in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);<span class="comment">//打开输入流文件</span></span><br><span class="line">    <span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())<span class="comment">//判断是否成功打开文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件打开有误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ofstream out_file;</span><br><span class="line">        out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);<span class="comment">//打开输出流文件</span></span><br><span class="line">      vector&lt;string&gt; letter;</span><br><span class="line">        string word;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(in_file,word))<span class="comment">//文件流读入，getline为按行读入，当读取完全部数据返回false</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())<span class="comment">//判断是否读入成功</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;数据类型不符，读入错误&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letter.<span class="built_in">push_back</span>(word);<span class="comment">//按行存储文件中的内容</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=letter.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            out_file &lt;&lt; letter[i]&lt;&lt;endl;<span class="comment">//文件流读出</span></span><br><span class="line">        &#125;</span><br><span class="line">        in_file.<span class="built_in">close</span>();<span class="comment">//关闭输入流文件</span></span><br><span class="line">        out_file.<span class="built_in">close</span>();<span class="comment">//关闭输出流文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>从宏观上看C++流</title>
    <link href="http://example.com/2021/06/04/C-%E6%B5%81/"/>
    <id>http://example.com/2021/06/04/C-%E6%B5%81/</id>
    <published>2021-06-04T10:12:49.000Z</published>
    <updated>2021-06-04T13:14:00.805Z</updated>
    
    <content type="html"><![CDATA[<p>C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。</p><span id="more"></span><h4 id="什么是C-流"><a href="#什么是C-流" class="headerlink" title="什么是C++流"></a>什么是C++流</h4><p>C++的流是一种数据的载体，通过它可以实现数据交换和传输。就像水流是由一串水组成的一样，C++的数据流就是由一串数据组成的更长数据。简单来说，C++流就是输入和输出，其中输入流就是数据从键盘、文件或者是指定字符串流入到程序中；输出流就是程序中的数据流向屏幕、文件或字符串。</p><h4 id="C-中的输入流和输出流"><a href="#C-中的输入流和输出流" class="headerlink" title="C++中的输入流和输出流"></a>C++中的输入流和输出流</h4><ol><li>通过标准输入设备——键盘（C++中使用cin），或标准输出设备——显示器（C++中使用cout）进行输入和输出操作，简称为标准I/O。</li><li>通过对文件进行输入和输出操作，简称为文件I/O。</li><li>通过对程序中的指定字符串进行输入和输出操作，简称为串I/O。</li></ol><h4 id="C-中输入输出流使用的头文件"><a href="#C-中输入输出流使用的头文件" class="headerlink" title="C++中输入输出流使用的头文件"></a>C++中输入输出流使用的头文件</h4><ol><li>标准输入输出：#include &lt;iostream&gt;</li><li>文件输入输出： #include &lt;fstream&gt;</li><li>串输入输出： #include &lt;sstream&gt;</li></ol><h4 id="为什么要使用C-流"><a href="#为什么要使用C-流" class="headerlink" title="为什么要使用C++流"></a>为什么要使用C++流</h4><ol><li>毫无疑问，一个有意义的程序一定会有程序本身想要的输入，和你所想看到的输出，这是一个程序最本质的意义。</li><li>对于标准输入输出流：在所需要输入的数据比较简单，数量少，输出的数据也比较简单，并且是一个即时的数据，使用标准输入输出流是有很大裨益的。</li><li>对于文件输入输出流：<ol><li>在所需要的数据很庞大，并且在文件中有着一定的规律（例如表格），使用文件输入流很有必要。</li><li>在需要对程序进行大量的测试，需要对同样或者大部分相同的数据进行输入，使用文件流可节省很多时间。</li><li>通过文件输入输出流可以对文件进行加密以保护文件的安全。</li></ol></li><li>对于串输入输出流：<ol><li>以字符串作为输入可以实现从字符串到数值型数据的转变。</li><li>当需要从一个长字符串中提取一些想要的信息，使用串输入输出流是比较方便的（例：从 “2021 年 6 月 1 日“中提取月份，即可将此长字符串作为一个输入流，依次读入到第三个数据即为月份）。 </li></ol></li></ol><h4 id="C-流我们应该学到什么"><a href="#C-流我们应该学到什么" class="headerlink" title="C++流我们应该学到什么"></a>C++流我们应该学到什么</h4><ol><li>对于文件输入输出流的使用即读写文本文件。</li><li>对于串输入输出流的使用即读写字符串。</li><li>文件加密。</li><li>文件输入输出流的随机访问。</li><li>处理BMP格式的图像文件。</li></ol><h4 id="友情提示："><a href="#友情提示：" class="headerlink" title="友情提示："></a>友情提示：</h4><p>若要详细学习C++流的5点内容，请点击标签中的C++流。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++操作图像中的像素-Picture类</title>
    <link href="http://example.com/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/"/>
    <id>http://example.com/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/</id>
    <published>2021-06-04T09:45:23.670Z</published>
    <updated>2021-06-04T09:47:19.961Z</updated>
    
    <content type="html"><![CDATA[<p>​    数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。</p><span id="more"></span><h4 id="如何使用picture类型"><a href="#如何使用picture类型" class="headerlink" title="如何使用picture类型"></a>如何使用picture类型</h4><ol><li><p>将文件picture.cpp、picture.h、lodepng.cpp和lodepng.h复制到用户的源文件所在文件夹（注：文件可在<u>wiley.com./go/bclo3</u>中的配套代码下的ch04/worked_example_2下找到），如下图：</p><img src="/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/1.png" class></li><li><p>在工作空间中打开它们，具体步骤：右键picture-&gt;添加文件-&gt;同时打开4个文件，然后编译器会弹出信息，点击确定即可，打开之后如下图：</p></li></ol><img src="/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/2.png" class><ol start="3"><li><p>在头文件中使用如下语句：#include “picture.h”,注：picture.h应由引号而不是尖括号括起来。</p></li><li><p>将要处理的图片复制到源文件所在的文件夹，图片名称为queen注：图片的类型必需为png类型。</p></li><li><p>打开图片，使用如下代码：Picture pic(“queen.png”)。</p><p>​    该语句定义了一个Picture 类型的变量 pic，用于保存图片的像素。</p><p>​    图片中每一个像素都有x和y坐标，其中0&lt;=x&lt;pic.width()(即图片的宽度)，0&lt;=y&lt;pic.height()(即图片的高度);例如(0,0)就位于图片的左上角，且y轴向下。</p><p>​    对于每一个像素都有一个RGB颜色值，该值由三原色组成：红、绿、蓝。每一个原色值都在0~255之间，所以我们操作图片中的像素即通过改变像素的颜色值来达到我们的目的。</p></li></ol><h4 id="Picture类型部分成员函数"><a href="#Picture类型部分成员函数" class="headerlink" title="Picture类型部分成员函数"></a>Picture类型部分成员函数</h4><ol><li><p>pic.width() 和 pic.height() ；</p><p>分别用来访问图片的的宽度和高度。</p></li><li><p>pic.red(x,y)、pic.blue(x,y) 和 pic.green(x,y) ；</p><p>分别用来获取像素(x,y)处红色原色值、蓝色原色值以及绿色原色值。</p></li><li><p>pic.set(x,y,red,green,bule)；</p><p>将像素(x,y)处设定为自定义原色值，其中后3个参数均为0~255之间的数值。</p></li><li><p>Picture pic2(“queen2.png”);</p><p>pic.add(pic2,num1,num2);</p><p>这是在图片pic中添加图片pic2，其中num1，num2 分别为pic2相对于(0,0)这个位置的位移。</p></li><li><p>pic.save(“result.png”)；</p><p>将操作后的图片保存。注：会在源文件中生成一个名为result，类型为png的图片。</p></li><li><p>Picture pic3(num1,num2,num3,num4,num5);</p><p>不从源文件中加载图片，生成一张单色的图片，其中num1,num2 分别指定图片的宽度的高度，num3、num4、num5 分别代表着图片每一个像素的红、绿、蓝原色值。</p></li></ol><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>编写程序，将图片queen中的每一个像素的个原色值都变成其相反值。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;picture.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Picture <span class="title">pic</span><span class="params">(<span class="string">&quot;queen.png&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pic.<span class="built_in">height</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pic.<span class="built_in">width</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> red=pic.<span class="built_in">red</span>(j,i);</span><br><span class="line">            <span class="keyword">int</span> green = pic.<span class="built_in">green</span>(j,i);</span><br><span class="line">            <span class="keyword">int</span> bule=pic.<span class="built_in">blue</span>(j,i);</span><br><span class="line">            pic.<span class="built_in">set</span>(j,i,<span class="number">255</span>-red,<span class="number">255</span>-green,<span class="number">255</span>-bule);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pic.<span class="built_in">save</span>(<span class="string">&quot;upset_down.png&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++_picture" scheme="http://example.com/tags/C-picture/"/>
    
  </entry>
  
</feed>
