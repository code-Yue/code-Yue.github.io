<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT 日志</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-07T12:58:58.910Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件的随机访问</title>
    <link href="http://example.com/2021/06/07/%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2021/06/07/%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE/</id>
    <published>2021-06-07T08:51:21.000Z</published>
    <updated>2021-06-07T12:58:58.910Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经掌握了C++的文件输入输出流，但前面我们的输入方式为顺序访问，下来介绍如何实现文件的随机读写。</p><span id="more"></span><h3 id="顺序访问与随机访问"><a href="#顺序访问与随机访问" class="headerlink" title="顺序访问与随机访问"></a>顺序访问与随机访问</h3><ul><li><h4 id="顺序访问"><a href="#顺序访问" class="headerlink" title="顺序访问"></a>顺序访问</h4><p>从文件中依次读取一个数据项或者向文件中依次写入一个数据项，没有向前或者向后跳过数据项，这种访问模式称为顺序访问。</p></li><li><h4 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h4><p>通过文件指针指定访问文件中的特定项，而无须首先读取之前的所有项，这种访问模式称为随机访问。</p><p>注：随机访问并没有任何的”随机性”——该术语只是意味着可以读取和修改存储于文件中任何位置的任何项。</p></li><li><h4 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h4><p>在文件操作中有一个文件指针，用来指明当前应进行读写的位置，没有具体变量。</p></li></ul><h3 id="随机访问有关的成员函数"><a href="#随机访问有关的成员函数" class="headerlink" title="随机访问有关的成员函数"></a>随机访问有关的成员函数</h3><ol><li>gcount() : 返回最后一次输入所读入的字节数。</li><li>tellg() : 返回输入文件指针的当前位置。</li><li>seekg(文件中的位置) ：将输入文件中指针移到指定的位置。</li><li>seekg(位移量，参照位置) : 以参照位置为基础移动若干字节。</li><li>tellp() : 返回输出文件指针的当前位置。</li><li>seekp(文件中的位置) ：将输出文件中指针移动到指定的位置。</li><li>seekp(位移量，参照位置) : 以参照位置为基础移动若干字节。</li></ol><p>注：对于上面的函数均是通过点运算符实现如( file.tellg() )，其中”文件中的位置”和”位移量”为 long 型参数，以字节为单位。”参照位置”可以是下面三者之一：</p><ol><li> ios::beg 文件开头</li><li>ios::cur 指向输入或输出的当前位置</li><li>ios::end 文件某尾</li></ol><p>比如：</p><ul><li>file.seekg(3)  指针移动到第三个字节的位置。</li><li>file.seekg(-3,ios::cur)  指针从当前位置向前移动三个字节。</li><li>file.seekg(3,ios::cur)   指针从当前位置向后移动三个字节。</li></ul><p>其他几个成员函数未举例，可根据以上例子自行体会。</p><p>目前文件的随机访问的基础知识已介绍完，不过可能会有一种感觉：感觉其很有用，知识也都掌握了，但是其有什么意义呢？怎么知道我想要的数据在文件中的位置，如果有这种感觉，下面的内容可能会对你有帮助。</p><h3 id="索引-随机访问"><a href="#索引-随机访问" class="headerlink" title="索引+随机访问"></a>索引+随机访问</h3><ul><li><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>将数据和偏移量(相对于文件开头)一对一建立索引。</li><li>将索引文件导入到内存中(数组或向量)。</li><li>如果想要查找某条数据，先从索引中找到对应的偏移量然后在从数据文件中取出即可。</li></ol></li><li><h4 id="优点-相比于顺序访问"><a href="#优点-相比于顺序访问" class="headerlink" title="优点(相比于顺序访问)"></a>优点(相比于顺序访问)</h4><ol><li>空间优化：索引文件比数据文件小的多。</li><li>时间优化：将数据文件内容读入到内存中就需要占用很大的内存。</li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面已经掌握了C++的文件输入输出流，但前面我们的输入方式为顺序访问，下来介绍如何实现文件的随机读写。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>文件加密之凯撒密码</title>
    <link href="http://example.com/2021/06/06/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E4%B9%8B%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/"/>
    <id>http://example.com/2021/06/06/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E4%B9%8B%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/</id>
    <published>2021-06-06T07:09:09.000Z</published>
    <updated>2021-06-06T08:40:33.065Z</updated>
    
    <content type="html"><![CDATA[<p>在读此篇文章时相信大家已经掌握了C++中的文件输入输出流，下来介绍利用命令行参数实现对文件的加密，本加密使用凯撒密码。</p><span id="more"></span><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul><li><h4 id="什么是命令行参数"><a href="#什么是命令行参数" class="headerlink" title="什么是命令行参数"></a>什么是命令行参数</h4><p>根据所使用的系统和C++的开发环境，有不同启动程序的方法。例如：通过在编译器环境中选择“运行”，单击图标，或在shell命令窗口中提示符出键入程序名。对于后一种方法称为“从命令行调用程序”，此种方法可以在程序名后面添加一些其他的参数，这些参数就被叫做命令行参数。</p><p>例如，使用如下命令行启动程序：</p><p>prog -v input.txt</p><p>其中程序名就是prog，然后程序会接受两个命令行参数“-v” 和 “input.txt” 。</p></li><li><h4 id="命令行参数何去何从"><a href="#命令行参数何去何从" class="headerlink" title="命令行参数何去何从"></a>命令行参数何去何从</h4><p>在使用命令行参数的时候，我们的主函数的定义就与以往有些不同，如下：</p><p>int  main(int argc,char* argv[])</p><p>{</p><p>​    ······</p><p>}</p><p>何去：可以看到主函数中多出了两个参数，一个是整数 argc，一个是char类型的字符串常量数组。</p><p>而我们的程序名以及所有的命令行参数都储存在argv[]这样一个数组中，其中argc就是数组的大小。</p><p> 何从：在我们写程序的时候我们就可以调用argv[] 和 argc 来使用命令行参数。</p><hr></li></ul><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定的数目进行偏移，形成密文，例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。</p><p>下就使用凯撒密码实现对文件的加密和解密。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设置密钥，可以随意给定一个整数值，这里我们使用3</span></span><br><span class="line">    <span class="keyword">int</span> key = <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置加密文件流</span></span><br><span class="line">    ifstream input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置输出文件流</span></span><br><span class="line">    ofstream output;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是加密还是解密，并打开输入文件于输出文件，并判断是否能够成功打开</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;argc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string arg = argv[i];</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(argv[i]==<span class="string">&quot;-d&quot;</span>)<span class="comment">//如果命令行参数为-d就是解密</span></span><br><span class="line">            &#123;</span><br><span class="line">                key= <span class="number">-3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">open</span>(arg);</span><br><span class="line">            <span class="keyword">if</span>(input.<span class="built_in">fail</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;input文件打开错误:&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">open</span>(arg);</span><br><span class="line">            <span class="keyword">if</span>(output.<span class="built_in">fail</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;output文件打开错误：&quot;</span>&lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户没有输入两个文件，应该退出</span></span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入四个命令行参数，依次为 程序名 -k或-d input.txt output.txt&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对文件进行加密</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(input.<span class="built_in">get</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        output.<span class="built_in">put</span>(ch+key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在读此篇文章时相信大家已经掌握了C++中的文件输入输出流，下来介绍利用命令行参数实现对文件的加密，本加密使用凯撒密码。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
    <category term="文件加密" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>C++流之读写字符串</title>
    <link href="http://example.com/2021/06/06/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2021/06/06/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-06-06T00:05:10.000Z</published>
    <updated>2021-06-06T02:52:30.715Z</updated>
    
    <content type="html"><![CDATA[<p>C++的输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标。下来介绍C++流类的串输入输出流。</p><span id="more"></span><h3 id="字符串流的类型和头文件"><a href="#字符串流的类型和头文件" class="headerlink" title="字符串流的类型和头文件"></a>字符串流的类型和头文件</h3><ul><li><h4 id="字符串流的类型"><a href="#字符串流的类型" class="headerlink" title="字符串流的类型"></a>字符串流的类型</h4><ol><li>istringstream：从字符串中读取字符。</li><li>ostringstream：将字符写入字符串。</li><li>stringstream：即可在字符串中写入字符，也可以读取字符。</li></ol></li><li><h4 id="字符串流的头文件"><a href="#字符串流的头文件" class="headerlink" title="字符串流的头文件"></a>字符串流的头文件</h4><p>​    三种类型的字符串流的使用，头文件均为 &lt;sstream&gt;</p><hr></li></ul><h3 id="打开字符串流"><a href="#打开字符串流" class="headerlink" title="打开字符串流"></a>打开字符串流</h3><ul><li><h4 id="打开字符串输入流"><a href="#打开字符串输入流" class="headerlink" title="打开字符串输入流"></a>打开字符串输入流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">istringstream strm;</span><br><span class="line">strm.<span class="built_in">str</span>(letter);</span><br></pre></td></tr></table></figure><ol><li>这里的strm是字符串输入流的一个对象，于标准输入流的cin类似。</li><li>其中str是流类的一个成员函数，用于初始化strm，通过点记号来调用。</li><li>letter是一个字符串，可以是已存在字符串变量，也可以是自定义字符串(需加双引号)。</li></ol></li><li><h4 id="打开字符串输出流"><a href="#打开字符串输出流" class="headerlink" title="打开字符串输出流"></a>打开字符串输出流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ostringstream strm;</span><br></pre></td></tr></table></figure><p>这里的strm是字符串输入流的一个对象，于标准输入流的cout类似。</p></li></ul><h3 id="字符串流读入和读出"><a href="#字符串流读入和读出" class="headerlink" title="字符串流读入和读出"></a>字符串流读入和读出</h3><ul><li><h4 id="字符串流读入"><a href="#字符串流读入" class="headerlink" title="字符串流读入"></a>字符串流读入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istringstream strm;</span><br><span class="line">strm.<span class="built_in">str</span>(<span class="string">&quot;2021 06 01&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">strm&gt;&gt;num;</span><br></pre></td></tr></table></figure><p>此时num的数值就是2021。</p></li><li><h4 id="字符串读出"><a href="#字符串读出" class="headerlink" title="字符串读出"></a>字符串读出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ostringstream strm;</span><br><span class="line"><span class="keyword">int</span> year=<span class="number">2021</span>;</span><br><span class="line"><span class="keyword">int</span> month= <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> day=<span class="number">1</span>;</span><br><span class="line">strm &lt;&lt;year&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;month &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;day;</span><br></pre></td></tr></table></figure><p>此时字符串strm就是”2021 6 1“。</p></li></ul><h3 id="字符串于数值数据的相互转化"><a href="#字符串于数值数据的相互转化" class="headerlink" title="字符串于数值数据的相互转化"></a>字符串于数值数据的相互转化</h3><ul><li><h4 id="字符串转变为数值"><a href="#字符串转变为数值" class="headerlink" title="字符串转变为数值"></a>字符串转变为数值</h4><ol><li><h5 id="字符串转为int型"><a href="#字符串转为int型" class="headerlink" title="字符串转为int型"></a>字符串转为int型</h5><p>法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istringstream strm;</span><br><span class="line">strm.<span class="built_in">str</span>(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">strm &gt;&gt; num;</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringstream strm;</span><br><span class="line">string letter = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">strm &lt;&lt; letter;</span><br><span class="line">strm&gt;&gt; num;</span><br><span class="line">strm.<span class="built_in">clear</span>();<span class="comment">//清空字符串流，再次使用需要重新格式化</span></span><br></pre></td></tr></table></figure><p>法三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string year = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="built_in">stoi</span>(year);</span><br></pre></td></tr></table></figure></li><li><h5 id="字符串转为double型"><a href="#字符串转为double型" class="headerlink" title="字符串转为double型"></a>字符串转为double型</h5><p>法一法二完全同上，只需将int改为double。</p><p>法三：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string year = <span class="string">&quot;202.1&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> num = <span class="built_in">stod</span>(year);</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="数值转变为字符串"><a href="#数值转变为字符串" class="headerlink" title="数值转变为字符串"></a>数值转变为字符串</h4><ol><li><h5 id="int型转变为字符串"><a href="#int型转变为字符串" class="headerlink" title="int型转变为字符串"></a>int型转变为字符串</h5><p>法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostringstream strm;</span><br><span class="line"><span class="keyword">int</span> num= <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">strm &lt;&lt; num;</span><br><span class="line">string letter = strm.<span class="built_in">str</span>();</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringstream strm;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">2021</span>;</span><br><span class="line">string letter;</span><br><span class="line">strm &lt;&lt; num;</span><br><span class="line">strm &gt;&gt; letter;</span><br><span class="line">strm.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><p>法三：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num=<span class="number">2021</span>;</span><br><span class="line">string letter = <span class="built_in">to_string</span>(num);</span><br></pre></td></tr></table></figure></li><li><h5 id="double-型转变为字符串"><a href="#double-型转变为字符串" class="headerlink" title="double 型转变为字符串"></a>double 型转变为字符串</h5><p>int型的三种方法均适用。注意：法三字符串变量会保留数值（double型）的小数点后六位，如果不足六位的情况下会使用0补齐，例如：string letter = to_string(2021),此时letter= “2021.000000”。</p></li></ol></li></ul><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打开字符串流</span></span><br><span class="line">    istringstream input;</span><br><span class="line">    ostringstream output;</span><br><span class="line">    stringstream in_out_put;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化读入字符串流</span></span><br><span class="line">    input.<span class="built_in">str</span>(<span class="string">&quot;2021 06 01&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以读入字符串流作为数据源</span></span><br><span class="line">    <span class="keyword">int</span> num1,num2,num3;</span><br><span class="line">    input &gt;&gt; num1;</span><br><span class="line">    input &gt;&gt; num2;</span><br><span class="line">    input &gt;&gt; num3;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1:&quot;</span>&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2:&quot;</span>&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num3:&quot;</span>&lt;&lt;num3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以读出字符串流作为数据结果</span></span><br><span class="line">    output &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num3;</span><br><span class="line">    string word = output.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word:&quot;</span> &lt;&lt; word &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串转变为int型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    istringstream input1;</span><br><span class="line">    input1.<span class="built_in">str</span>(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> num4;</span><br><span class="line">    input1 &gt;&gt; num4;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num4:&quot;</span>&lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put1;</span><br><span class="line">    string letter = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> num5;</span><br><span class="line">    in_out_put1 &lt;&lt; letter;</span><br><span class="line">    in_out_put1 &gt;&gt; num5;</span><br><span class="line">    in_out_put1.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num5:&quot;</span>&lt;&lt; num5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    string letter1= <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> num6 = <span class="built_in">stoi</span>(letter1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num6:&quot;</span>&lt;&lt; num6&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串转变为double型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    istringstream input2;</span><br><span class="line">    input2.<span class="built_in">str</span>(<span class="string">&quot;202.1&quot;</span>);</span><br><span class="line">    <span class="keyword">double</span> num7;</span><br><span class="line">    input2 &gt;&gt; num7;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num7:&quot;</span>&lt;&lt; num7 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put2;</span><br><span class="line">    string letter2 = <span class="string">&quot;202.1&quot;</span>;</span><br><span class="line">    <span class="keyword">double</span> num8;</span><br><span class="line">    in_out_put2 &lt;&lt; letter2;</span><br><span class="line">    in_out_put2 &gt;&gt; num8;</span><br><span class="line">    in_out_put2.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num8:&quot;</span>&lt;&lt; num8 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line"></span><br><span class="line">    string letter3= <span class="string">&quot;202.1&quot;</span>;</span><br><span class="line">    <span class="keyword">double</span> num9 = <span class="built_in">stod</span>(letter3);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num9:&quot;</span>&lt;&lt; num9&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int型转变为字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    ostringstream output1;</span><br><span class="line">    <span class="keyword">int</span> num10 = <span class="number">2021</span>;</span><br><span class="line">    output1 &lt;&lt; num10;</span><br><span class="line">    string word1 = output1.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word1:&quot;</span>&lt;&lt; word1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put3;</span><br><span class="line">    <span class="keyword">int</span> num11 = <span class="number">2021</span>;</span><br><span class="line">    string word2;</span><br><span class="line">    in_out_put3 &lt;&lt; num11;</span><br><span class="line">    in_out_put3 &gt;&gt;word2;</span><br><span class="line">    in_out_put3.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word2:&quot;</span>&lt;&lt; word2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    <span class="keyword">int</span> num12 = <span class="number">2021</span>;</span><br><span class="line">    string word3=<span class="built_in">to_string</span>(num12);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word3:&quot;</span>&lt;&lt;word3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//double型转变为字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    ostringstream output2;</span><br><span class="line">    <span class="keyword">double</span> num13 = <span class="number">202.1</span>;</span><br><span class="line">    output2 &lt;&lt; num13;</span><br><span class="line">    string word4 = output2.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word4:&quot;</span>&lt;&lt; word4&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put4;</span><br><span class="line">    <span class="keyword">double</span> num14 = <span class="number">202.1</span>;</span><br><span class="line">    string word5;</span><br><span class="line">    in_out_put4 &lt;&lt; num14;</span><br><span class="line">    in_out_put4 &gt;&gt;word5;</span><br><span class="line">    in_out_put4.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word5:&quot;</span>&lt;&lt; word5&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    <span class="keyword">double</span> num15 = <span class="number">202.1</span>;</span><br><span class="line">    string word6=<span class="built_in">to_string</span>(num15);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word6:&quot;</span>&lt;&lt;word6&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++的输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标。下来介绍C++流类的串输入输出流。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++流之读写文本文件</title>
    <link href="http://example.com/2021/06/05/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/06/05/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</id>
    <published>2021-06-05T01:45:54.000Z</published>
    <updated>2021-06-05T04:11:25.018Z</updated>
    
    <content type="html"><![CDATA[<p>​    C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。</p><span id="more"></span><h3 id="文件流的类型和头文件"><a href="#文件流的类型和头文件" class="headerlink" title="文件流的类型和头文件"></a>文件流的类型和头文件</h3><ul><li>文件流有三种类型：<ol><li>用于输入：ifstream</li><li>用于输出：ofstream</li><li>即可用于输入也可用于输出：fstream</li></ol></li><li>当使用三种文件流的任何一个时，头文件均为 &lt;fstream&gt;</li></ul><h3 id="打开和关闭文件流，并判断是否打开成功"><a href="#打开和关闭文件流，并判断是否打开成功" class="headerlink" title="打开和关闭文件流，并判断是否打开成功"></a>打开和关闭文件流，并判断是否打开成功</h3><ul><li><h4 id="打开文件流"><a href="#打开文件流" class="headerlink" title="打开文件流"></a>打开文件流</h4><ul><li><p>打开输入文件流：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>这里的 in_file 是文件输入流的一个对象，对于标准输入流 cin 的用法在其上完全适用。</p></li><li><p>其中open是其一个成员函数，使用点记号来进行调用。</p></li><li><p>input.txt 是储存在源文件下名为”input“的一个文本文档，里面的内容用于以后的输入。</p></li></ol></li><li><p>打开输出文件流：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream out_file;</span><br><span class="line">out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>这里的 out_file 是文件输出流的一个对象，对于标准输出流 cout 的用法在其上完全适用。</li><li>其中open是其一个成员函数，使用点记号来进行调用。</li><li>output.txt 是一个输出文件，使用上述语句时会在源文件中生成一个名为”output“的文本文档，输出的内容皆在这里显示。</li></ol></li></ul></li><li><h4 id="判断是否成功打开输入文件流"><a href="#判断是否成功打开输入文件流" class="headerlink" title="判断是否成功打开输入文件流"></a>判断是否成功打开输入文件流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">​cout&lt;&lt; <span class="string">&quot;Can&#x27;t  open  input.txt&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">​读取输入</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：这里的in_file.fail() 中的fail 是一个成员函数，如果打开文件失败，会返回一个true值。</p></li><li><h4 id="关闭文件流"><a href="#关闭文件流" class="headerlink" title="关闭文件流"></a>关闭文件流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">in_file.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>注: 这里的in_file.close() 中的close是一个成员函数，一般在程序结束是所有之前打开的流都会自动关闭，只有在流变量(这里是in_file)处理另一个文件是，才需要手动关闭。</p></li></ul><h3 id="文件流读入和读出，并判断是否成功读入"><a href="#文件流读入和读出，并判断是否成功读入" class="headerlink" title="文件流读入和读出，并判断是否成功读入"></a>文件流读入和读出，并判断是否成功读入</h3><ul><li><h4 id="文件流读入"><a href="#文件流读入" class="headerlink" title="文件流读入"></a>文件流读入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">string letter;</span><br><span class="line">in_file &gt;&gt; letter;</span><br></pre></td></tr></table></figure><p>注：可以看到文件流的读入  in_file &gt;&gt; letter; 于标准读入cin&gt;&gt; letter; 用法相同；不同的是in_file &gt;&gt;letter;是从文本文档 input 中读入，而cin&gt;&gt;letter,是从键盘键入。</p></li><li><h4 id="文件流读出"><a href="#文件流读出" class="headerlink" title="文件流读出"></a>文件流读出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream out_file;</span><br><span class="line">out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">string letter2=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">out_file &lt;&lt; letter2;</span><br></pre></td></tr></table></figure><p>注：可以看到文件流的读出 out_file &lt;&lt; letter2; 于标准读出cout &lt;&lt; letter2; 用法相同；不同的是out_file &lt;&lt; letter2;是将“hello world” 写入文本文档output中，而cout &lt;&lt; letter2,是将“hello world”写入显示屏。</p></li><li><h4 id="判断是否读入成功"><a href="#判断是否读入成功" class="headerlink" title="判断是否读入成功"></a>判断是否读入成功</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">string letter;</span><br><span class="line">in_file &gt;&gt; letter;</span><br><span class="line"><span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">​cout &lt;&lt; <span class="string">&quot;输入错误&quot;</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">​处理输入；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：可以看到其用法于cin.fail()用法相同，当输入错误(当试图从文本中读取数字例如：55，但读入的数据项并不是标准的格式化数字例如：55a，则读取失败，in_file.fail()会返回一个true值。</p><p>值得说明的是，当从文件读取输入时，数字格式错误并不是失败的唯一原因，假设已经使用了文件中包含的所有数据，并试图读取更多的数据项时，文件流就会进入失败状态，而对于格式输入流cin就会一直等待用户输入。因此当一个输入流文件中的数据类型均为数值，我们想要计算其均值，即可直接使用如下语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file；</span><br><span class="line">in_file.<span class="built_in">open</span>(input.txt);</span><br><span class="line"><span class="keyword">double</span> tatol=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"><span class="keyword">while</span>(in_file&gt;&gt;num)</span><br><span class="line">&#123;</span><br><span class="line">    tatol+=num;</span><br><span class="line">    num1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> average = tatol/num1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>读取文本文档input.txt中的所有行，并将其按行逆序输出到文本文档output.txt中。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream in_file;</span><br><span class="line">    in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);<span class="comment">//打开输入流文件</span></span><br><span class="line">    <span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())<span class="comment">//判断是否成功打开文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件打开有误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ofstream out_file;</span><br><span class="line">        out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);<span class="comment">//打开输出流文件</span></span><br><span class="line">      vector&lt;string&gt; letter;</span><br><span class="line">        string word;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(in_file,word))<span class="comment">//文件流读入，getline为按行读入，当读取完全部数据返回false</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())<span class="comment">//判断是否读入成功</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;数据类型不符，读入错误&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letter.<span class="built_in">push_back</span>(word);<span class="comment">//按行存储文件中的内容</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=letter.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            out_file &lt;&lt; letter[i]&lt;&lt;endl;<span class="comment">//文件流读出</span></span><br><span class="line">        &#125;</span><br><span class="line">        in_file.<span class="built_in">close</span>();<span class="comment">//关闭输入流文件</span></span><br><span class="line">        out_file.<span class="built_in">close</span>();<span class="comment">//关闭输出流文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>从宏观上看C++流</title>
    <link href="http://example.com/2021/06/04/C-%E6%B5%81/"/>
    <id>http://example.com/2021/06/04/C-%E6%B5%81/</id>
    <published>2021-06-04T10:12:49.000Z</published>
    <updated>2021-06-04T13:14:00.805Z</updated>
    
    <content type="html"><![CDATA[<p>C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。</p><span id="more"></span><h4 id="什么是C-流"><a href="#什么是C-流" class="headerlink" title="什么是C++流"></a>什么是C++流</h4><p>C++的流是一种数据的载体，通过它可以实现数据交换和传输。就像水流是由一串水组成的一样，C++的数据流就是由一串数据组成的更长数据。简单来说，C++流就是输入和输出，其中输入流就是数据从键盘、文件或者是指定字符串流入到程序中；输出流就是程序中的数据流向屏幕、文件或字符串。</p><h4 id="C-中的输入流和输出流"><a href="#C-中的输入流和输出流" class="headerlink" title="C++中的输入流和输出流"></a>C++中的输入流和输出流</h4><ol><li>通过标准输入设备——键盘（C++中使用cin），或标准输出设备——显示器（C++中使用cout）进行输入和输出操作，简称为标准I/O。</li><li>通过对文件进行输入和输出操作，简称为文件I/O。</li><li>通过对程序中的指定字符串进行输入和输出操作，简称为串I/O。</li></ol><h4 id="C-中输入输出流使用的头文件"><a href="#C-中输入输出流使用的头文件" class="headerlink" title="C++中输入输出流使用的头文件"></a>C++中输入输出流使用的头文件</h4><ol><li>标准输入输出：#include &lt;iostream&gt;</li><li>文件输入输出： #include &lt;fstream&gt;</li><li>串输入输出： #include &lt;sstream&gt;</li></ol><h4 id="为什么要使用C-流"><a href="#为什么要使用C-流" class="headerlink" title="为什么要使用C++流"></a>为什么要使用C++流</h4><ol><li>毫无疑问，一个有意义的程序一定会有程序本身想要的输入，和你所想看到的输出，这是一个程序最本质的意义。</li><li>对于标准输入输出流：在所需要输入的数据比较简单，数量少，输出的数据也比较简单，并且是一个即时的数据，使用标准输入输出流是有很大裨益的。</li><li>对于文件输入输出流：<ol><li>在所需要的数据很庞大，并且在文件中有着一定的规律（例如表格），使用文件输入流很有必要。</li><li>在需要对程序进行大量的测试，需要对同样或者大部分相同的数据进行输入，使用文件流可节省很多时间。</li><li>通过文件输入输出流可以对文件进行加密以保护文件的安全。</li></ol></li><li>对于串输入输出流：<ol><li>以字符串作为输入可以实现从字符串到数值型数据的转变。</li><li>当需要从一个长字符串中提取一些想要的信息，使用串输入输出流是比较方便的（例：从 “2021 年 6 月 1 日“中提取月份，即可将此长字符串作为一个输入流，依次读入到第三个数据即为月份）。 </li></ol></li></ol><h4 id="C-流我们应该学到什么"><a href="#C-流我们应该学到什么" class="headerlink" title="C++流我们应该学到什么"></a>C++流我们应该学到什么</h4><ol><li>对于文件输入输出流的使用即读写文本文件。</li><li>对于串输入输出流的使用即读写字符串。</li><li>文件加密。</li><li>文件输入输出流的随机访问。</li><li>处理BMP格式的图像文件。</li></ol><h4 id="友情提示："><a href="#友情提示：" class="headerlink" title="友情提示："></a>友情提示：</h4><p>若要详细学习C++流的5点内容，请点击标签中的C++流。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++操作图像中的像素-Picture类</title>
    <link href="http://example.com/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/"/>
    <id>http://example.com/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/</id>
    <published>2021-06-04T09:45:23.670Z</published>
    <updated>2021-06-04T09:47:19.961Z</updated>
    
    <content type="html"><![CDATA[<p>​    数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。</p><span id="more"></span><h4 id="如何使用picture类型"><a href="#如何使用picture类型" class="headerlink" title="如何使用picture类型"></a>如何使用picture类型</h4><ol><li><p>将文件picture.cpp、picture.h、lodepng.cpp和lodepng.h复制到用户的源文件所在文件夹（注：文件可在<u>wiley.com./go/bclo3</u>中的配套代码下的ch04/worked_example_2下找到），如下图：</p><img src="/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/1.png" class></li><li><p>在工作空间中打开它们，具体步骤：右键picture-&gt;添加文件-&gt;同时打开4个文件，然后编译器会弹出信息，点击确定即可，打开之后如下图：</p></li></ol><img src="/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/2.png" class><ol start="3"><li><p>在头文件中使用如下语句：#include “picture.h”,注：picture.h应由引号而不是尖括号括起来。</p></li><li><p>将要处理的图片复制到源文件所在的文件夹，图片名称为queen注：图片的类型必需为png类型。</p></li><li><p>打开图片，使用如下代码：Picture pic(“queen.png”)。</p><p>​    该语句定义了一个Picture 类型的变量 pic，用于保存图片的像素。</p><p>​    图片中每一个像素都有x和y坐标，其中0&lt;=x&lt;pic.width()(即图片的宽度)，0&lt;=y&lt;pic.height()(即图片的高度);例如(0,0)就位于图片的左上角，且y轴向下。</p><p>​    对于每一个像素都有一个RGB颜色值，该值由三原色组成：红、绿、蓝。每一个原色值都在0~255之间，所以我们操作图片中的像素即通过改变像素的颜色值来达到我们的目的。</p></li></ol><h4 id="Picture类型部分成员函数"><a href="#Picture类型部分成员函数" class="headerlink" title="Picture类型部分成员函数"></a>Picture类型部分成员函数</h4><ol><li><p>pic.width() 和 pic.height() ；</p><p>分别用来访问图片的的宽度和高度。</p></li><li><p>pic.red(x,y)、pic.blue(x,y) 和 pic.green(x,y) ；</p><p>分别用来获取像素(x,y)处红色原色值、蓝色原色值以及绿色原色值。</p></li><li><p>pic.set(x,y,red,green,bule)；</p><p>将像素(x,y)处设定为自定义原色值，其中后3个参数均为0~255之间的数值。</p></li><li><p>Picture pic2(“queen2.png”);</p><p>pic.add(pic2,num1,num2);</p><p>这是在图片pic中添加图片pic2，其中num1，num2 分别为pic2相对于(0,0)这个位置的位移。</p></li><li><p>pic.save(“result.png”)；</p><p>将操作后的图片保存。注：会在源文件中生成一个名为result，类型为png的图片。</p></li><li><p>Picture pic3(num1,num2,num3,num4,num5);</p><p>不从源文件中加载图片，生成一张单色的图片，其中num1,num2 分别指定图片的宽度的高度，num3、num4、num5 分别代表着图片每一个像素的红、绿、蓝原色值。</p></li></ol><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>编写程序，将图片queen中的每一个像素的个原色值都变成其相反值。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;picture.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Picture <span class="title">pic</span><span class="params">(<span class="string">&quot;queen.png&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pic.<span class="built_in">height</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pic.<span class="built_in">width</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> red=pic.<span class="built_in">red</span>(j,i);</span><br><span class="line">            <span class="keyword">int</span> green = pic.<span class="built_in">green</span>(j,i);</span><br><span class="line">            <span class="keyword">int</span> bule=pic.<span class="built_in">blue</span>(j,i);</span><br><span class="line">            pic.<span class="built_in">set</span>(j,i,<span class="number">255</span>-red,<span class="number">255</span>-green,<span class="number">255</span>-bule);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pic.<span class="built_in">save</span>(<span class="string">&quot;upset_down.png&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++_picture" scheme="http://example.com/tags/C-picture/"/>
    
  </entry>
  
</feed>
