[{"title":"文件的随机访问","date":"2021-06-07T08:51:21.000Z","path":"2021/06/07/文件的随机访问/","text":"前面已经掌握了C++的文件输入输出流，但前面我们的输入方式为顺序访问，下来介绍如何实现文件的随机读写。 顺序访问与随机访问 顺序访问从文件中依次读取一个数据项或者向文件中依次写入一个数据项，没有向前或者向后跳过数据项，这种访问模式称为顺序访问。 随机访问通过文件指针指定访问文件中的特定项，而无须首先读取之前的所有项，这种访问模式称为随机访问。 注：随机访问并没有任何的”随机性”——该术语只是意味着可以读取和修改存储于文件中任何位置的任何项。 文件指针在文件操作中有一个文件指针，用来指明当前应进行读写的位置，没有具体变量。 随机访问有关的成员函数 gcount() : 返回最后一次输入所读入的字节数。 tellg() : 返回输入文件指针的当前位置。 seekg(文件中的位置) ：将输入文件中指针移到指定的位置。 seekg(位移量，参照位置) : 以参照位置为基础移动若干字节。 tellp() : 返回输出文件指针的当前位置。 seekp(文件中的位置) ：将输出文件中指针移动到指定的位置。 seekp(位移量，参照位置) : 以参照位置为基础移动若干字节。 注：对于上面的函数均是通过点运算符实现如( file.tellg() )，其中”文件中的位置”和”位移量”为 long 型参数，以字节为单位。”参照位置”可以是下面三者之一： ios::beg 文件开头 ios::cur 指向输入或输出的当前位置 ios::end 文件某尾 比如： file.seekg(3) 指针移动到第三个字节的位置。 file.seekg(-3,ios::cur) 指针从当前位置向前移动三个字节。 file.seekg(3,ios::cur) 指针从当前位置向后移动三个字节。 其他几个成员函数未举例，可根据以上例子自行体会。 目前文件的随机访问的基础知识已介绍完，不过可能会有一种感觉：感觉其很有用，知识也都掌握了，但是其有什么意义呢？怎么知道我想要的数据在文件中的位置，如果有这种感觉，下面的内容可能会对你有帮助。 索引+随机访问 流程 将数据和偏移量(相对于文件开头)一对一建立索引。 将索引文件导入到内存中(数组或向量)。 如果想要查找某条数据，先从索引中找到对应的偏移量然后在从数据文件中取出即可。 优点(相比于顺序访问) 空间优化：索引文件比数据文件小的多。 时间优化：将数据文件内容读入到内存中就需要占用很大的内存。","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"文件加密之凯撒密码","date":"2021-06-06T07:09:09.000Z","path":"2021/06/06/文件加密之凯撒密码/","text":"在读此篇文章时相信大家已经掌握了C++中的文件输入输出流，下来介绍利用命令行参数实现对文件的加密，本加密使用凯撒密码。 命令行参数 什么是命令行参数根据所使用的系统和C++的开发环境，有不同启动程序的方法。例如：通过在编译器环境中选择“运行”，单击图标，或在shell命令窗口中提示符出键入程序名。对于后一种方法称为“从命令行调用程序”，此种方法可以在程序名后面添加一些其他的参数，这些参数就被叫做命令行参数。 例如，使用如下命令行启动程序： prog -v input.txt 其中程序名就是prog，然后程序会接受两个命令行参数“-v” 和 “input.txt” 。 命令行参数何去何从在使用命令行参数的时候，我们的主函数的定义就与以往有些不同，如下： int main(int argc,char* argv[]) { ​ ······ } 何去：可以看到主函数中多出了两个参数，一个是整数 argc，一个是char类型的字符串常量数组。 而我们的程序名以及所有的命令行参数都储存在argv[]这样一个数组中，其中argc就是数组的大小。 何从：在我们写程序的时候我们就可以调用argv[] 和 argc 来使用命令行参数。 凯撒密码凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定的数目进行偏移，形成密文，例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。 下就使用凯撒密码实现对文件的加密和解密。 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;using namespace std;int main(int argc,char* argv[])&#123; //设置密钥，可以随意给定一个整数值，这里我们使用3 int key = 3 ; //设置加密文件流 ifstream input; //设置输出文件流 ofstream output; //判断是加密还是解密，并打开输入文件于输出文件，并判断是否能够成功打开 for(int i=1;i&lt;argc;i++) &#123; string arg = argv[i]; if(i==1) &#123; if(argv[i]==&quot;-d&quot;)//如果命令行参数为-d就是解密 &#123; key= -3; &#125; &#125; else if(i==2) &#123; input.open(arg); if(input.fail()) &#123; cout &lt;&lt; &quot;input文件打开错误:&quot; &lt;&lt; &quot; &quot;&lt;&lt;arg&lt;&lt;endl; return 1; &#125; &#125; else &#123; output.open(arg); if(output.fail()) &#123; cout &lt;&lt; &quot;output文件打开错误：&quot;&lt;&lt; &quot; &quot;&lt;&lt;arg&lt;&lt;endl; return 1; &#125; &#125; &#125; //用户没有输入两个文件，应该退出 if(argc!=4) &#123; cout &lt;&lt; &quot;请输入四个命令行参数，依次为 程序名 -k或-d input.txt output.txt&quot;&lt;&lt;endl; return 1; &#125; //对文件进行加密 char ch; while(input.get(ch)) &#123; output.put(ch+key); &#125; return 0;&#125;","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"},{"name":"文件加密","slug":"文件加密","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"}]},{"title":"C++流之读写字符串","date":"2021-06-06T00:05:10.000Z","path":"2021/06/06/C-流之读写字符串/","text":"C++的输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标。下来介绍C++流类的串输入输出流。 字符串流的类型和头文件 字符串流的类型 istringstream：从字符串中读取字符。 ostringstream：将字符写入字符串。 stringstream：即可在字符串中写入字符，也可以读取字符。 字符串流的头文件​ 三种类型的字符串流的使用，头文件均为 &lt;sstream&gt; 打开字符串流 打开字符串输入流12istringstream strm;strm.str(letter); 这里的strm是字符串输入流的一个对象，于标准输入流的cin类似。 其中str是流类的一个成员函数，用于初始化strm，通过点记号来调用。 letter是一个字符串，可以是已存在字符串变量，也可以是自定义字符串(需加双引号)。 打开字符串输出流1ostringstream strm; 这里的strm是字符串输入流的一个对象，于标准输入流的cout类似。 字符串流读入和读出 字符串流读入1234istringstream strm;strm.str(&quot;2021 06 01&quot;);int num;strm&gt;&gt;num; 此时num的数值就是2021。 字符串读出12345ostringstream strm;int year=2021;int month= 6;int day=1;strm &lt;&lt;year&lt;&lt; &quot; &quot; &lt;&lt;month &lt;&lt; &quot; &quot;&lt;&lt;day; 此时字符串strm就是”2021 6 1“。 字符串于数值数据的相互转化 字符串转变为数值 字符串转为int型法一： 1234istringstream strm;strm.str(&quot;2021&quot;);int num;strm &gt;&gt; num; 法二： 123456stringstream strm;string letter = &quot;2021&quot;;int num;strm &lt;&lt; letter;strm&gt;&gt; num;strm.clear();//清空字符串流，再次使用需要重新格式化 法三 12string year = &quot;2021&quot;;int num = stoi(year); 字符串转为double型法一法二完全同上，只需将int改为double。 法三： 12string year = &quot;202.1&quot;;double num = stod(year); 数值转变为字符串 int型转变为字符串法一： 1234ostringstream strm;int num= &quot;2021&quot;;strm &lt;&lt; num;string letter = strm.str(); 法二： 123456stringstream strm;int num=2021;string letter;strm &lt;&lt; num;strm &gt;&gt; letter;strm.clear(); 法三： 12int num=2021;string letter = to_string(num); double 型转变为字符串int型的三种方法均适用。注意：法三字符串变量会保留数值（double型）的小数点后六位，如果不足六位的情况下会使用0补齐，例如：string letter = to_string(2021),此时letter= “2021.000000”。 源码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;sstream&gt;using namespace std;int main()&#123; //打开字符串流 istringstream input; ostringstream output; stringstream in_out_put; //初始化读入字符串流 input.str(&quot;2021 06 01&quot;); //以读入字符串流作为数据源 int num1,num2,num3; input &gt;&gt; num1; input &gt;&gt; num2; input &gt;&gt; num3; cout &lt;&lt; &quot;num1:&quot;&lt;&lt;num1&lt;&lt;endl; cout &lt;&lt; &quot;num2:&quot;&lt;&lt;num2&lt;&lt;endl; cout &lt;&lt; &quot;num3:&quot;&lt;&lt;num3&lt;&lt;endl; //以读出字符串流作为数据结果 output &lt;&lt; num1 &lt;&lt; &quot; &quot; &lt;&lt; num2 &lt;&lt; &quot; &quot; &lt;&lt; num3; string word = output.str(); cout &lt;&lt; &quot;word:&quot; &lt;&lt; word &lt;&lt;endl; //字符串转变为int型 //法一： istringstream input1; input1.str(&quot;2021&quot;); int num4; input1 &gt;&gt; num4; cout &lt;&lt;&quot;num4:&quot;&lt;&lt; num4 &lt;&lt; endl; //法二： stringstream in_out_put1; string letter = &quot;2021&quot;; int num5; in_out_put1 &lt;&lt; letter; in_out_put1 &gt;&gt; num5; in_out_put1.clear(); cout &lt;&lt;&quot;num5:&quot;&lt;&lt; num5 &lt;&lt; endl; //法三： string letter1= &quot;2021&quot;; int num6 = stoi(letter1); cout &lt;&lt; &quot;num6:&quot;&lt;&lt; num6&lt;&lt;endl; //字符串转变为double型 //法一： istringstream input2; input2.str(&quot;202.1&quot;); double num7; input2 &gt;&gt; num7; cout &lt;&lt;&quot;num7:&quot;&lt;&lt; num7 &lt;&lt; endl; //法二： stringstream in_out_put2; string letter2 = &quot;202.1&quot;; double num8; in_out_put2 &lt;&lt; letter2; in_out_put2 &gt;&gt; num8; in_out_put2.clear(); cout &lt;&lt;&quot;num8:&quot;&lt;&lt; num8 &lt;&lt; endl; //法三： string letter3= &quot;202.1&quot;; double num9 = stod(letter3); cout &lt;&lt; &quot;num9:&quot;&lt;&lt; num9&lt;&lt;endl; //int型转变为字符串 //法一： ostringstream output1; int num10 = 2021; output1 &lt;&lt; num10; string word1 = output1.str(); cout &lt;&lt; &quot;word1:&quot;&lt;&lt; word1&lt;&lt;endl; //法二： stringstream in_out_put3; int num11 = 2021; string word2; in_out_put3 &lt;&lt; num11; in_out_put3 &gt;&gt;word2; in_out_put3.clear(); cout &lt;&lt; &quot;word2:&quot;&lt;&lt; word2&lt;&lt;endl; //法三： int num12 = 2021; string word3=to_string(num12); cout &lt;&lt; &quot;word3:&quot;&lt;&lt;word3&lt;&lt;endl; //double型转变为字符串 //法一： ostringstream output2; double num13 = 202.1; output2 &lt;&lt; num13; string word4 = output2.str(); cout &lt;&lt; &quot;word4:&quot;&lt;&lt; word4&lt;&lt;endl; //法二： stringstream in_out_put4; double num14 = 202.1; string word5; in_out_put4 &lt;&lt; num14; in_out_put4 &gt;&gt;word5; in_out_put4.clear(); cout &lt;&lt; &quot;word5:&quot;&lt;&lt; word5&lt;&lt;endl; //法三： double num15 = 202.1; string word6=to_string(num15); cout &lt;&lt; &quot;word6:&quot;&lt;&lt;word6&lt;&lt;endl; return 0;&#125;","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"C++流之读写文本文件","date":"2021-06-05T01:45:54.000Z","path":"2021/06/05/C-流之读写文本文件/","text":"​ C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。 文件流的类型和头文件 文件流有三种类型： 用于输入：ifstream 用于输出：ofstream 即可用于输入也可用于输出：fstream 当使用三种文件流的任何一个时，头文件均为 &lt;fstream&gt; 打开和关闭文件流，并判断是否打开成功 打开文件流 打开输入文件流： 12ifstream in_file;in_file.open(&quot;input.txt&quot;); 这里的 in_file 是文件输入流的一个对象，对于标准输入流 cin 的用法在其上完全适用。 其中open是其一个成员函数，使用点记号来进行调用。 input.txt 是储存在源文件下名为”input“的一个文本文档，里面的内容用于以后的输入。 打开输出文件流： 12ofstream out_file;out_file.open(&quot;output.txt&quot;); 这里的 out_file 是文件输出流的一个对象，对于标准输出流 cout 的用法在其上完全适用。 其中open是其一个成员函数，使用点记号来进行调用。 output.txt 是一个输出文件，使用上述语句时会在源文件中生成一个名为”output“的文本文档，输出的内容皆在这里显示。 判断是否成功打开输入文件流12345678910ifstream in_file;in_file.open(&quot;input.txt&quot;);if(in_file.fail())&#123;​ cout&lt;&lt; &quot;Can&#x27;t open input.txt&quot;&lt;&lt;endl;&#125;else&#123;​ 读取输入&#125; 注：这里的in_file.fail() 中的fail 是一个成员函数，如果打开文件失败，会返回一个true值。 关闭文件流123ifstream in_file;in_file.open(&quot;input.txt&quot;);in_file.close(); 注: 这里的in_file.close() 中的close是一个成员函数，一般在程序结束是所有之前打开的流都会自动关闭，只有在流变量(这里是in_file)处理另一个文件是，才需要手动关闭。 文件流读入和读出，并判断是否成功读入 文件流读入1234ifstream in_file;in_file.open(&quot;input.txt&quot;);string letter;in_file &gt;&gt; letter; 注：可以看到文件流的读入 in_file &gt;&gt; letter; 于标准读入cin&gt;&gt; letter; 用法相同；不同的是in_file &gt;&gt;letter;是从文本文档 input 中读入，而cin&gt;&gt;letter,是从键盘键入。 文件流读出1234ofstream out_file;out_file.open(&quot;output.txt&quot;);string letter2=&quot;hello world&quot;;out_file &lt;&lt; letter2; 注：可以看到文件流的读出 out_file &lt;&lt; letter2; 于标准读出cout &lt;&lt; letter2; 用法相同；不同的是out_file &lt;&lt; letter2;是将“hello world” 写入文本文档output中，而cout &lt;&lt; letter2,是将“hello world”写入显示屏。 判断是否读入成功123456789101112ifstream in_file;in_file.open(&quot;input.txt&quot;);string letter;in_file &gt;&gt; letter;if(in_file.fail())&#123;​ cout &lt;&lt; &quot;输入错误&quot;；&#125;else&#123;​ 处理输入；&#125; 注：可以看到其用法于cin.fail()用法相同，当输入错误(当试图从文本中读取数字例如：55，但读入的数据项并不是标准的格式化数字例如：55a，则读取失败，in_file.fail()会返回一个true值。 值得说明的是，当从文件读取输入时，数字格式错误并不是失败的唯一原因，假设已经使用了文件中包含的所有数据，并试图读取更多的数据项时，文件流就会进入失败状态，而对于格式输入流cin就会一直等待用户输入。因此当一个输入流文件中的数据类型均为数值，我们想要计算其均值，即可直接使用如下语句： 1234567891011ifstream in_file；in_file.open(input.txt);double tatol=0;double num1=0;double num;while(in_file&gt;&gt;num)&#123; tatol+=num; num1++;&#125;int average = tatol/num1; 举例读取文本文档input.txt中的所有行，并将其按行逆序输出到文本文档output.txt中。 示例代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;vector&gt;using namespace std;int main()&#123; ifstream in_file; in_file.open(&quot;input.txt&quot;);//打开输入流文件 if(in_file.fail())//判断是否成功打开文件 &#123; cout &lt;&lt; &quot;文件打开有误&quot;; &#125; else &#123; ofstream out_file; out_file.open(&quot;output.txt&quot;);//打开输出流文件 vector&lt;string&gt; letter; string word; while(getline(in_file,word))//文件流读入，getline为按行读入，当读取完全部数据返回false &#123; if(in_file.fail())//判断是否读入成功 &#123; cout &lt;&lt; &quot;数据类型不符，读入错误&quot;; &#125; else &#123; letter.push_back(word);//按行存储文件中的内容 &#125; &#125; for(int i=letter.size()-1;i&gt;=0;i--) &#123; out_file &lt;&lt; letter[i]&lt;&lt;endl;//文件流读出 &#125; in_file.close();//关闭输入流文件 out_file.close();//关闭输出流文件 &#125;&#125; ​","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"从宏观上看C++流","date":"2021-06-04T10:12:49.000Z","path":"2021/06/04/C-流/","text":"C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。 什么是C++流C++的流是一种数据的载体，通过它可以实现数据交换和传输。就像水流是由一串水组成的一样，C++的数据流就是由一串数据组成的更长数据。简单来说，C++流就是输入和输出，其中输入流就是数据从键盘、文件或者是指定字符串流入到程序中；输出流就是程序中的数据流向屏幕、文件或字符串。 C++中的输入流和输出流 通过标准输入设备——键盘（C++中使用cin），或标准输出设备——显示器（C++中使用cout）进行输入和输出操作，简称为标准I/O。 通过对文件进行输入和输出操作，简称为文件I/O。 通过对程序中的指定字符串进行输入和输出操作，简称为串I/O。 C++中输入输出流使用的头文件 标准输入输出：#include &lt;iostream&gt; 文件输入输出： #include &lt;fstream&gt; 串输入输出： #include &lt;sstream&gt; 为什么要使用C++流 毫无疑问，一个有意义的程序一定会有程序本身想要的输入，和你所想看到的输出，这是一个程序最本质的意义。 对于标准输入输出流：在所需要输入的数据比较简单，数量少，输出的数据也比较简单，并且是一个即时的数据，使用标准输入输出流是有很大裨益的。 对于文件输入输出流： 在所需要的数据很庞大，并且在文件中有着一定的规律（例如表格），使用文件输入流很有必要。 在需要对程序进行大量的测试，需要对同样或者大部分相同的数据进行输入，使用文件流可节省很多时间。 通过文件输入输出流可以对文件进行加密以保护文件的安全。 对于串输入输出流： 以字符串作为输入可以实现从字符串到数值型数据的转变。 当需要从一个长字符串中提取一些想要的信息，使用串输入输出流是比较方便的（例：从 “2021 年 6 月 1 日“中提取月份，即可将此长字符串作为一个输入流，依次读入到第三个数据即为月份）。 C++流我们应该学到什么 对于文件输入输出流的使用即读写文本文件。 对于串输入输出流的使用即读写字符串。 文件加密。 文件输入输出流的随机访问。 处理BMP格式的图像文件。 友情提示：若要详细学习C++流的5点内容，请点击标签中的C++流。","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"C++操作图像中的像素-Picture类","date":"2021-06-04T09:45:23.670Z","path":"2021/06/04/C-操作图像中的像素/","text":"​ 数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。 如何使用picture类型 将文件picture.cpp、picture.h、lodepng.cpp和lodepng.h复制到用户的源文件所在文件夹（注：文件可在wiley.com./go/bclo3中的配套代码下的ch04/worked_example_2下找到），如下图： 在工作空间中打开它们，具体步骤：右键picture-&gt;添加文件-&gt;同时打开4个文件，然后编译器会弹出信息，点击确定即可，打开之后如下图： 在头文件中使用如下语句：#include “picture.h”,注：picture.h应由引号而不是尖括号括起来。 将要处理的图片复制到源文件所在的文件夹，图片名称为queen注：图片的类型必需为png类型。 打开图片，使用如下代码：Picture pic(“queen.png”)。 ​ 该语句定义了一个Picture 类型的变量 pic，用于保存图片的像素。 ​ 图片中每一个像素都有x和y坐标，其中0&lt;=x&lt;pic.width()(即图片的宽度)，0&lt;=y&lt;pic.height()(即图片的高度);例如(0,0)就位于图片的左上角，且y轴向下。 ​ 对于每一个像素都有一个RGB颜色值，该值由三原色组成：红、绿、蓝。每一个原色值都在0~255之间，所以我们操作图片中的像素即通过改变像素的颜色值来达到我们的目的。 Picture类型部分成员函数 pic.width() 和 pic.height() ； 分别用来访问图片的的宽度和高度。 pic.red(x,y)、pic.blue(x,y) 和 pic.green(x,y) ； 分别用来获取像素(x,y)处红色原色值、蓝色原色值以及绿色原色值。 pic.set(x,y,red,green,bule)； 将像素(x,y)处设定为自定义原色值，其中后3个参数均为0~255之间的数值。 Picture pic2(“queen2.png”); pic.add(pic2,num1,num2); 这是在图片pic中添加图片pic2，其中num1，num2 分别为pic2相对于(0,0)这个位置的位移。 pic.save(“result.png”)； 将操作后的图片保存。注：会在源文件中生成一个名为result，类型为png的图片。 Picture pic3(num1,num2,num3,num4,num5); 不从源文件中加载图片，生成一张单色的图片，其中num1,num2 分别指定图片的宽度的高度，num3、num4、num5 分别代表着图片每一个像素的红、绿、蓝原色值。 举例：编写程序，将图片queen中的每一个像素的个原色值都变成其相反值。 示例代码：123456789101112131415161718192021#include &lt;iostream&gt;#include &quot;picture.h&quot;using namespace std;int main()&#123; Picture pic(&quot;queen.png&quot;); for(int i=0;i&lt;pic.height();i++) &#123; for(int j=0;j&lt;pic.width();j++) &#123; int red=pic.red(j,i); int green = pic.green(j,i); int bule=pic.blue(j,i); pic.set(j,i,255-red,255-green,255-bule); &#125; &#125; pic.save(&quot;upset_down.png&quot;); return 0;&#125;","tags":[{"name":"C++_picture","slug":"C-picture","permalink":"http://example.com/tags/C-picture/"}]}]