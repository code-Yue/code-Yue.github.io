[{"title":"从宏观上看C++流","date":"2021-06-04T10:12:49.000Z","path":"2021/06/04/C-流/","text":"C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。 什么是C++流C++的流是一种数据的载体，通过它可以实现数据交换和传输。就像水流是由一串水组成的一样，C++的数据流就是由一串数据组成的更长数据。简单来说，C++流就是输入和输出，其中输入流就是数据从键盘、文件或者是指定字符串流入到程序中；输出流就是程序中的数据流向屏幕、文件或字符串。 C++中的输入流和输出流 通过标准输入设备——键盘（C++中使用cin），或标准输出设备——显示器（C++中使用cout）进行输入和输出操作，简称为标准I/O。 通过对文件进行输入和输出操作，简称为文件I/O。 通过对程序中的指定字符串进行输入和输出操作，简称为串I/O。 C++中输入输出流使用的头文件 标准输入输出：#include &lt;iostream&gt; 文件输入输出： #include &lt;fstream&gt; 串输入输出： #include &lt;sstream&gt; 为什么要使用C++流 毫无疑问，一个有意义的程序一定会有程序本身想要的输入，和你所想看到的输出，这是一个程序最本质的意义。 对于标准输入输出流：在所需要输入的数据比较简单，数量少，输出的数据也比较简单，并且是一个即时的数据，使用标准输入输出流是有很大裨益的。 对于文件输入输出流： 在所需要的数据很庞大，并且在文件中有着一定的规律（例如表格），使用文件输入流很有必要。 在需要对程序进行大量的测试，需要对同样或者大部分相同的数据进行输入，使用文件流可节省很多时间。 通过文件输入输出流可以对文件进行加密以保护文件的安全。 对于串输入输出流： 以字符串作为输入可以实现从字符串到数值型数据的转变。 当需要从一个长字符串中提取一些想要的信息，使用串输入输出流是比较方便的（例：从 “2021 年 6 月 1 日“中提取月份，即可将此长字符串作为一个输入流，依次读入到第三个数据即为月份）。 C++流我们应该学到什么 对于文件输入输出流的使用即读写文本文件。 对于串输入输出流的使用即读写字符串。 文件加密。 文件输入输出流的随机访问。 处理BMP格式的图像文件。 友情提示：若要详细学习C++流的5点内容，请点击标签中的C++流。","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"C++操作图像中的像素-Picture类","date":"2021-06-04T09:45:23.670Z","path":"2021/06/04/C-操作图像中的像素/","text":"​ 数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。 如何使用picture类型 将文件picture.cpp、picture.h、lodepng.cpp和lodepng.h复制到用户的源文件所在文件夹（注：文件可在wiley.com./go/bclo3中的配套代码下的ch04/worked_example_2下找到），如下图： 在工作空间中打开它们，具体步骤：右键picture-&gt;添加文件-&gt;同时打开4个文件，然后编译器会弹出信息，点击确定即可，打开之后如下图： 在头文件中使用如下语句：#include “picture.h”,注：picture.h应由引号而不是尖括号括起来。 将要处理的图片复制到源文件所在的文件夹，图片名称为queen注：图片的类型必需为png类型。 打开图片，使用如下代码：Picture pic(“queen.png”)。 ​ 该语句定义了一个Picture 类型的变量 pic，用于保存图片的像素。 ​ 图片中每一个像素都有x和y坐标，其中0&lt;=x&lt;pic.width()(即图片的宽度)，0&lt;=y&lt;pic.height()(即图片的高度);例如(0,0)就位于图片的左上角，且y轴向下。 ​ 对于每一个像素都有一个RGB颜色值，该值由三原色组成：红、绿、蓝。每一个原色值都在0~255之间，所以我们操作图片中的像素即通过改变像素的颜色值来达到我们的目的。 Picture类型部分成员函数 pic.width() 和 pic.height() ； 分别用来访问图片的的宽度和高度。 pic.red(x,y)、pic.blue(x,y) 和 pic.green(x,y) ； 分别用来获取像素(x,y)处红色原色值、蓝色原色值以及绿色原色值。 pic.set(x,y,red,green,bule)； 将像素(x,y)处设定为自定义原色值，其中后3个参数均为0~255之间的数值。 Picture pic2(“queen2.png”); pic.add(pic2,num1,num2); 这是在图片pic中添加图片pic2，其中num1，num2 分别为pic2相对于(0,0)这个位置的位移。 pic.save(“result.png”)； 将操作后的图片保存。注：会在源文件中生成一个名为result，类型为png的图片。 Picture pic3(num1,num2,num3,num4,num5); 不从源文件中加载图片，生成一张单色的图片，其中num1,num2 分别指定图片的宽度的高度，num3、num4、num5 分别代表着图片每一个像素的红、绿、蓝原色值。 举例：编写程序，将图片queen中的每一个像素的个原色值都变成其相反值。 示例代码：123456789101112131415161718192021#include &lt;iostream&gt;#include &quot;picture.h&quot;using namespace std;int main()&#123; Picture pic(&quot;queen.png&quot;); for(int i=0;i&lt;pic.height();i++) &#123; for(int j=0;j&lt;pic.width();j++) &#123; int red=pic.red(j,i); int green = pic.green(j,i); int bule=pic.blue(j,i); pic.set(j,i,255-red,255-green,255-bule); &#125; &#125; pic.save(&quot;upset_down.png&quot;); return 0;&#125;","tags":[{"name":"C++_picture","slug":"C-picture","permalink":"http://example.com/tags/C-picture/"}]}]